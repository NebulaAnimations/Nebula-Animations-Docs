"use strict";(self.webpackChunkna_docs_site=self.webpackChunkna_docs_site||[]).push([[1933],{9835:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var a=n(5893),s=n(1151);const i={title:"Surface Masking Settings",description:"Set what surfaces the decal can show up on"},c="Surface Masking Settings",o={id:"magic-decal/material-inspector/surface_masking_settings",title:"Surface Masking Settings",description:"Set what surfaces the decal can show up on",source:"@site/docs/01_magic-decal/02_material-inspector/08_surface_masking_settings.md",sourceDirName:"01_magic-decal/02_material-inspector",slug:"/magic-decal/material-inspector/surface_masking_settings",permalink:"/magic-decal/material-inspector/surface_masking_settings",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"Surface Masking Settings",description:"Set what surfaces the decal can show up on"},sidebar:"tutorialSidebar",previous:{title:"Warp Settings",permalink:"/magic-decal/material-inspector/warp_settings"},next:{title:"Magic Decal V1 Docs",permalink:"/category/magic-decal-v1-docs"}},r={},l=[{value:"Masks",id:"masks",level:2}];function u(e){const t={h1:"h1",h2:"h2",p:"p",...(0,s.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"surface-masking-settings",children:"Surface Masking Settings"}),"\n",(0,a.jsx)(t.h2,{id:"masks",children:"Masks"}),"\n",(0,a.jsx)(t.p,{children:"The checkboxes allow you to set what surfaces you want the decal to apply to. To know what surface is linked to each box use the Gizmo in unity on the top right of the Scene view window. You will notice it has arrows/cones pointing to a box with X, Y, Z and the negative values for each as well. The Y cone pointing down means the decal is being applied to the top of objects."})]})}function d(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>c});var a=n(7294);const s={},i=a.createContext(s);function c(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);